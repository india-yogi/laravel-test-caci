<?php
 # Note: This unit test is generated by Gen AI to showcase we can use that for our purpose,
 // but due to time constraint it is not checked.
namespace Tests\Feature\Http\Controllers\Auth;

use App\Helpers\Helper;
use App\Http\Controllers\Auth\SalesController;
use App\Interfaces\SalesRepositoryInterface;
use App\Interfaces\ProductRepositoryInterface;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class SalesControllerTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    public function test_index_returns_all_sales_and_products()
    {
        $sales = factory(Sales::class, 2)->create();
        $products = factory(\App\Models\Product::class, 3)->create();

        $mockSalesRepo = Mockery::mock(SalesRepositoryInterface::class);
        $mockSalesRepo->shouldReceive('getAllSales')->andReturn($sales->toArray());

        $mockProductRepo = Mockery::mock(ProductRepositoryInterface::class);
        $mockProductRepo->shouldReceive('getAllProduct')->andReturn($products->toArray());

        $this->app->instance(SalesRepositoryInterface::class, $mockSalesRepo);
        $this->app->instance(ProductRepositoryInterface::class, $mockProductRepo);

        $controller = new SalesController($mockSalesRepo, $mockProductRepo);
        $response = $this->get('/sales');

        $response->assertStatus(200)
            ->assertViewHas('sales')
            ->assertViewHas('products');

        $this->assertCount(2, $response->viewData('sales'));
        $this->assertCount(3, $response->viewData('products'));
    }

    public function test_create_returns_sales_details_view()
    {
        $controller = new SalesController(Mockery::mock(SalesRepositoryInterface::class), Mockery::mock(ProductRepositoryInterface::class));

        $response = $this->get('/sales/create');

        $response->assertStatus(200)
            ->assertViewIs('auth.sales_details');
    }

    public function test_store_validates_and_creates_sale()
    {
        $product_id = 1;
        $quantity = 2;
        $unit_cost = 10.00;
        $selling_price = Helper::calculateSellingCost($quantity, $unit_cost);

        $salesDetails = [
            'product_id' => $product_id,
            'quantity' => $quantity,
            'unit_cost' => $unit_cost,
            'selling_price' => $selling_price,
        ];

        $mockSalesRepo = Mockery::mock(SalesRepositoryInterface::class);
        $mockSalesRepo->shouldReceive('createSales')->once()->with($salesDetails);

        $this->app->instance(SalesRepositoryInterface::class, $mockSalesRepo);

        $data = [
            'product_id' => $product_id,
            'quantity' => $quantity,
            'unit_cost' => $unit_cost,
        ];

        $controller = new SalesController($mockSalesRepo, Mockery::mock(ProductRepositoryInterface::class));
        $response = $this->post('/sales', $data);

        $response->assertStatus(302) // Redirect on successful store
            ->assertRedirect('/sales');

        Mockery::close();
    }

    public function test_store_returns_error_on_validation_failure()
    {
        $data = [
            'quantity' => 'invalid_quantity', // Missing product_id and invalid quantity
        ];

        $controller = new SalesController(Mockery::mock(SalesRepositoryInterface::class), Mockery::mock(ProductRepositoryInterface::class));
        $response = $this->post('/sales', $data);

        $response->assertStatus(302) // Redirect on validation error
            ->assertSessionHasErrors(['product_id', 'quantity']);
    }

    // Consider adding a test for destroy method if it has specific logic
}